2024-10-04 07:55:07 INFO PlacementCenterConfig { cluster_name: "placement-test", addr: "127.0.0.1", node_id: 1, grpc_port: 8871, nodes: {"1": String("127.0.0.1:1228")}, http_port: 8971, data_path: "/tmp/placement-center-geek/geek-local", log: Log { log_config: "./config/log4rs.yaml", log_path: "./logs" } }
2024-10-04 07:55:07 INFO get_initial_state vote=<T1-N1:Q> last_purged_log_id=None last_applied=None committed=T1-N1.1 last_log_id=T1-N1.1
2024-10-04 07:55:07 INFO re-apply log [64..0) in 2 item chunks to state machine
2024-10-04 07:55:07 INFO re-apply 2 log entries: [0, 2),
2024-10-04 07:55:07 INFO load membership from log: [2..2)
2024-10-04 07:55:07 INFO load key log ids from (None,T1-N1.1]
2024-10-04 07:55:07 INFO Broker HTTP Server start. port:8971
2024-10-04 07:55:07 INFO Raft Nodes:{1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }}
2024-10-04 07:55:07 INFO Broker Grpc Server start. port:8871
2024-10-04 07:55:07 INFO startup begin: state: RaftState { vote: Leased { data: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true }, last_update: Some(Instant { tv_sec: 253351, tv_nsec: 446656458 }), lease: 0ns, lease_enabled: true }, committed: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }), purged_next: 0, log_ids: LogIdList { key_log_ids: [LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }, LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }] }, membership_state: MembershipState { committed: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} }, effective: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} } }, snapshot_meta: SnapshotMeta { last_log_id: None, last_membership: StoredMembership { log_id: None, membership: Membership { configs: [], nodes: {} } }, snapshot_id: "" }, server_state: Learner, io_state: IOState { building_snapshot: false, io_progress: IOProgress { accepted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), submitted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), flushed: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })) }, applied: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }), snapshot: None, purged: None }, purge_upto: None }, is_leader: true, is_voter: true
2024-10-04 07:55:07 INFO Start trying to initialize node:1
2024-10-04 07:55:07 INFO become leader id=1
2024-10-04 07:55:07 INFO remove all replication
2024-10-04 07:55:07 INFO id=1 HeartbeatWorker are shutdown
2024-10-04 07:55:07 INFO Whether nodes should be initialized, flag=true
2024-10-04 07:56:47 INFO When ctrl + c is received, the service starts to stop
2024-10-04 07:56:47 INFO HTTP Server stopped successfully
2024-10-04 07:56:47 INFO HTTP Server stopped successfully
2024-10-04 07:56:47 INFO Timer shutdown signal sent: Ok(())
2024-10-04 07:56:47 INFO TickLoop received cancel signal, quit
2024-10-04 07:56:47 INFO recv from rx_shutdown
2024-10-04 07:56:47 ERROR error reporting metrics error=watch channel closed id=1
2024-10-04 07:56:47 INFO RaftCore shutdown complete
2024-10-04 07:56:47 INFO openraft::core::sm::worker::Worker<_, _, _>::worker_loop: rx closed, state machine worker quit
2024-10-04 07:57:02 INFO PlacementCenterConfig { cluster_name: "placement-test", addr: "127.0.0.1", node_id: 1, grpc_port: 8871, nodes: {"1": String("127.0.0.1:1228")}, http_port: 8971, data_path: "/tmp/placement-center-geek/geek-local", log: Log { log_config: "./config/log4rs.yaml", log_path: "./logs" } }
2024-10-04 07:57:02 INFO get_initial_state vote=<T0-N0:-> last_purged_log_id=None last_applied=None committed=None last_log_id=None
2024-10-04 07:57:02 INFO load membership from log: [0..0)
2024-10-04 07:57:02 INFO load key log ids from (None,None]
2024-10-04 07:57:02 INFO Broker HTTP Server start. port:8971
2024-10-04 07:57:02 INFO Broker Grpc Server start. port:8871
2024-10-04 07:57:02 INFO Raft Nodes:{1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }}
2024-10-04 07:57:02 INFO startup begin: state: RaftState { vote: Leased { data: Vote { leader_id: LeaderId { term: 0, node_id: 0 }, committed: false }, last_update: Some(Instant { tv_sec: 253467, tv_nsec: 142998916 }), lease: 0ns, lease_enabled: true }, committed: None, purged_next: 0, log_ids: LogIdList { key_log_ids: [] }, membership_state: MembershipState { committed: EffectiveMembership { log_id: None, membership: Membership { configs: [], nodes: {} }, voter_ids: {} }, effective: EffectiveMembership { log_id: None, membership: Membership { configs: [], nodes: {} }, voter_ids: {} } }, snapshot_meta: SnapshotMeta { last_log_id: None, last_membership: StoredMembership { log_id: None, membership: Membership { configs: [], nodes: {} } }, snapshot_id: "" }, server_state: Learner, io_state: IOState { building_snapshot: false, io_progress: IOProgress { accepted: Some(Vote(NonCommittedVote { vote: Vote { leader_id: LeaderId { term: 0, node_id: 0 }, committed: false } })), submitted: Some(Vote(NonCommittedVote { vote: Vote { leader_id: LeaderId { term: 0, node_id: 0 }, committed: false } })), flushed: Some(Vote(NonCommittedVote { vote: Vote { leader_id: LeaderId { term: 0, node_id: 0 }, committed: false } })) }, applied: None, snapshot: None, purged: None }, purge_upto: None }, is_leader: false, is_voter: false
2024-10-04 07:57:02 INFO Start trying to initialize node:1
2024-10-04 07:57:02 INFO startup done: id=1 target_state: Learner
2024-10-04 07:57:02 INFO Whether nodes should be initialized, flag=false
2024-10-04 07:57:02 INFO received RaftMsg::Initialize: openraft::core::raft_core::RaftCore<_, _, _>::handle_api_msg members={1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }}
2024-10-04 07:57:02 INFO openraft::engine::engine_impl::Engine<_>::elect, new candidate: {<T1-N1:->@07:57:02.862804, last_log_id:T0-N0.0 progress:{1: false}}
2024-10-04 07:57:02 INFO vote is changing from <T0-N0:Q> to <T1-N1:->
2024-10-04 07:57:02 INFO received Notification::VoteResponse: openraft::core::raft_core::RaftCore<_, _, _>::handle_notification now=07:57:02.863247 resp={<T1-N1:->, last_log:None}
2024-10-04 07:57:02 INFO openraft::engine::engine_impl::Engine<_>::handle_vote_resp resp={<T1-N1:->, last_log:None} target=1 my_vote=<T1-N1:-> my_last_log_id=T0-N0.0
2024-10-04 07:57:02 INFO openraft::proposer::candidate::Candidate<_, _>::grant_by voting={<T1-N1:->@07:57:02.862804, last_log_id:T0-N0.0 progress:{1: true}}
2024-10-04 07:57:02 INFO a quorum granted my vote
2024-10-04 07:57:02 INFO openraft::engine::engine_impl::Engine<_>::establish_leader
2024-10-04 07:57:02 INFO vote is changing from <T1-N1:-> to <T1-N1:Q>
2024-10-04 07:57:02 INFO become leader id=1
2024-10-04 07:57:02 INFO remove all replication
2024-10-04 07:57:02 INFO id=1 HeartbeatWorker are shutdown
2024-10-04 07:57:02 INFO received Notification::VoteResponse: openraft::core::raft_core::RaftCore<_, _, _>::handle_notification now=07:57:02.863656 resp={<T1-N1:Q>, last_log:None}
2024-10-04 07:57:02 INFO Node 1 was initialized successfully
2024-10-04 07:58:33 INFO When ctrl + c is received, the service starts to stop
2024-10-04 07:58:33 INFO HTTP Server stopped successfully
2024-10-04 07:58:33 INFO HTTP Server stopped successfully
2024-10-04 07:58:33 INFO Timer shutdown signal sent: Ok(())
2024-10-04 07:58:33 INFO TickLoop received cancel signal, quit
2024-10-04 07:58:33 INFO recv from rx_shutdown
2024-10-04 07:58:33 ERROR error reporting metrics error=watch channel closed id=1
2024-10-04 07:58:33 INFO RaftCore shutdown complete
2024-10-04 07:58:33 INFO openraft::core::sm::worker::Worker<_, _, _>::worker_loop: rx closed, state machine worker quit
2024-10-04 07:58:42 INFO PlacementCenterConfig { cluster_name: "placement-test", addr: "127.0.0.1", node_id: 1, grpc_port: 8871, nodes: {"1": String("127.0.0.1:1228")}, http_port: 8971, data_path: "/tmp/placement-center-geek/geek-local", log: Log { log_config: "./config/log4rs.yaml", log_path: "./logs" } }
2024-10-04 07:58:42 INFO get_initial_state vote=<T1-N1:Q> last_purged_log_id=None last_applied=None committed=T1-N1.1 last_log_id=T1-N1.1
2024-10-04 07:58:42 INFO re-apply log [64..0) in 2 item chunks to state machine
2024-10-04 07:58:42 INFO re-apply 2 log entries: [0, 2),
2024-10-04 07:58:42 INFO load membership from log: [2..2)
2024-10-04 07:58:42 INFO load key log ids from (None,T1-N1.1]
2024-10-04 07:58:42 INFO Broker HTTP Server start. port:8971
2024-10-04 07:58:42 INFO Broker Grpc Server start. port:8871
2024-10-04 07:58:42 INFO Raft Nodes:{1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }}
2024-10-04 07:58:42 INFO startup begin: state: RaftState { vote: Leased { data: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true }, last_update: Some(Instant { tv_sec: 253566, tv_nsec: 632674958 }), lease: 0ns, lease_enabled: true }, committed: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }), purged_next: 0, log_ids: LogIdList { key_log_ids: [LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }, LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }] }, membership_state: MembershipState { committed: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} }, effective: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} } }, snapshot_meta: SnapshotMeta { last_log_id: None, last_membership: StoredMembership { log_id: None, membership: Membership { configs: [], nodes: {} } }, snapshot_id: "" }, server_state: Learner, io_state: IOState { building_snapshot: false, io_progress: IOProgress { accepted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), submitted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), flushed: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })) }, applied: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }), snapshot: None, purged: None }, purge_upto: None }, is_leader: true, is_voter: true
2024-10-04 07:58:42 INFO Start trying to initialize node:1
2024-10-04 07:58:42 INFO become leader id=1
2024-10-04 07:58:42 INFO remove all replication
2024-10-04 07:58:42 INFO id=1 HeartbeatWorker are shutdown
2024-10-04 07:58:42 INFO Whether nodes should be initialized, flag=true
2024-10-04 08:00:19 INFO When ctrl + c is received, the service starts to stop
2024-10-04 08:00:19 INFO HTTP Server stopped successfully
2024-10-04 08:00:19 INFO HTTP Server stopped successfully
2024-10-04 08:00:19 INFO Timer shutdown signal sent: Ok(())
2024-10-04 08:00:19 INFO TickLoop received cancel signal, quit
2024-10-04 08:00:19 INFO recv from rx_shutdown
2024-10-04 08:00:19 ERROR error reporting metrics error=watch channel closed id=1
2024-10-04 08:00:19 INFO RaftCore shutdown complete
2024-10-04 08:00:19 INFO openraft::core::sm::worker::Worker<_, _, _>::worker_loop: rx closed, state machine worker quit
2024-10-04 08:00:29 INFO PlacementCenterConfig { cluster_name: "placement-test", addr: "127.0.0.1", node_id: 1, grpc_port: 8871, nodes: {"1": String("127.0.0.1:1228")}, http_port: 8971, data_path: "/tmp/placement-center-geek/geek-local", log: Log { log_config: "./config/log4rs.yaml", log_path: "./logs" } }
2024-10-04 08:00:29 INFO get_initial_state vote=<T1-N1:Q> last_purged_log_id=None last_applied=None committed=T1-N1.1 last_log_id=T1-N1.1
2024-10-04 08:00:29 INFO re-apply log [64..0) in 2 item chunks to state machine
2024-10-04 08:00:29 INFO re-apply 2 log entries: [0, 2),
2024-10-04 08:00:29 INFO load membership from log: [2..2)
2024-10-04 08:00:29 INFO load key log ids from (None,T1-N1.1]
2024-10-04 08:00:29 INFO Broker Grpc Server start. port:8871
2024-10-04 08:00:29 INFO Broker HTTP Server start. port:8971
2024-10-04 08:00:29 INFO Raft Nodes:{1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }}
2024-10-04 08:00:29 INFO startup begin: state: RaftState { vote: Leased { data: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true }, last_update: Some(Instant { tv_sec: 253674, tv_nsec: 189549791 }), lease: 0ns, lease_enabled: true }, committed: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }), purged_next: 0, log_ids: LogIdList { key_log_ids: [LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }, LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }] }, membership_state: MembershipState { committed: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} }, effective: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} } }, snapshot_meta: SnapshotMeta { last_log_id: None, last_membership: StoredMembership { log_id: None, membership: Membership { configs: [], nodes: {} } }, snapshot_id: "" }, server_state: Learner, io_state: IOState { building_snapshot: false, io_progress: IOProgress { accepted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), submitted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), flushed: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })) }, applied: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }), snapshot: None, purged: None }, purge_upto: None }, is_leader: true, is_voter: true
2024-10-04 08:00:29 INFO Start trying to initialize node:1
2024-10-04 08:00:29 INFO become leader id=1
2024-10-04 08:00:29 INFO remove all replication
2024-10-04 08:00:29 INFO id=1 HeartbeatWorker are shutdown
2024-10-04 08:00:29 INFO Whether nodes should be initialized, flag=true
2024-10-04 08:21:31 INFO When ctrl + c is received, the service starts to stop
2024-10-04 08:21:31 INFO HTTP Server stopped successfully
2024-10-04 08:21:31 INFO HTTP Server stopped successfully
2024-10-04 08:21:31 INFO Timer shutdown signal sent: Ok(())
2024-10-04 08:21:31 INFO TickLoop received cancel signal, quit
2024-10-04 08:21:31 INFO recv from rx_shutdown
2024-10-04 08:21:31 ERROR error reporting metrics error=watch channel closed id=1
2024-10-04 08:21:31 INFO RaftCore shutdown complete
2024-10-04 08:21:31 INFO openraft::core::sm::worker::Worker<_, _, _>::worker_loop: rx closed, state machine worker quit
2024-10-04 08:21:43 INFO PlacementCenterConfig { cluster_name: "placement-test", addr: "127.0.0.1", node_id: 1, grpc_port: 8871, nodes: {"1": String("127.0.0.1:1228")}, http_port: 8971, data_path: "/tmp/placement-center-geek/geek-local", log: Log { log_config: "./config/log4rs.yaml", log_path: "./logs" } }
2024-10-04 08:21:43 INFO get_initial_state vote=<T1-N1:Q> last_purged_log_id=None last_applied=None committed=T1-N1.5 last_log_id=T1-N1.5
2024-10-04 08:21:43 INFO re-apply log [64..0) in 6 item chunks to state machine
2024-10-04 08:21:43 INFO re-apply 6 log entries: [0, 6),
2024-10-04 08:21:43 INFO load membership from log: [6..6)
2024-10-04 08:21:43 INFO load key log ids from (None,T1-N1.5]
2024-10-04 08:21:43 INFO Raft Nodes:{1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }}
2024-10-04 08:21:43 INFO Broker HTTP Server start. port:8971
2024-10-04 08:21:43 INFO Broker Grpc Server start. port:8871
2024-10-04 08:21:43 INFO startup begin: state: RaftState { vote: Leased { data: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true }, last_update: Some(Instant { tv_sec: 254260, tv_nsec: 667369500 }), lease: 0ns, lease_enabled: true }, committed: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 5 }), purged_next: 0, log_ids: LogIdList { key_log_ids: [LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }, LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }, LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 5 }] }, membership_state: MembershipState { committed: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} }, effective: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} } }, snapshot_meta: SnapshotMeta { last_log_id: None, last_membership: StoredMembership { log_id: None, membership: Membership { configs: [], nodes: {} } }, snapshot_id: "" }, server_state: Learner, io_state: IOState { building_snapshot: false, io_progress: IOProgress { accepted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), submitted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), flushed: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })) }, applied: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 5 }), snapshot: None, purged: None }, purge_upto: None }, is_leader: true, is_voter: true
2024-10-04 08:21:43 INFO Start trying to initialize node:1
2024-10-04 08:21:43 INFO become leader id=1
2024-10-04 08:21:43 INFO remove all replication
2024-10-04 08:21:43 INFO id=1 HeartbeatWorker are shutdown
2024-10-04 08:21:43 INFO Whether nodes should be initialized, flag=true
2024-10-04 08:23:22 INFO When ctrl + c is received, the service starts to stop
2024-10-04 08:23:22 INFO HTTP Server stopped successfully
2024-10-04 08:23:22 INFO HTTP Server stopped successfully
2024-10-04 08:23:22 INFO Timer shutdown signal sent: Err(())
2024-10-04 08:23:34 INFO PlacementCenterConfig { cluster_name: "placement-test", addr: "127.0.0.1", node_id: 1, grpc_port: 8871, nodes: {"1": String("127.0.0.1:1228")}, http_port: 8971, data_path: "/tmp/placement-center-geek/geek-local", log: Log { log_config: "./config/log4rs.yaml", log_path: "./logs" } }
2024-10-04 08:23:34 INFO get_initial_state vote=<T1-N1:Q> last_purged_log_id=None last_applied=None committed=T1-N1.6 last_log_id=T1-N1.6
2024-10-04 08:23:34 INFO re-apply log [64..0) in 7 item chunks to state machine
2024-10-04 08:23:34 INFO re-apply 7 log entries: [0, 7),
2024-10-04 08:23:34 INFO load membership from log: [7..7)
2024-10-04 08:23:34 INFO load key log ids from (None,T1-N1.6]
2024-10-04 08:23:34 INFO Raft Nodes:{1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }}
2024-10-04 08:23:34 INFO Broker HTTP Server start. port:8971
2024-10-04 08:23:34 INFO Broker Grpc Server start. port:8871
2024-10-04 08:23:34 INFO startup begin: state: RaftState { vote: Leased { data: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true }, last_update: Some(Instant { tv_sec: 254371, tv_nsec: 443918708 }), lease: 0ns, lease_enabled: true }, committed: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 6 }), purged_next: 0, log_ids: LogIdList { key_log_ids: [LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }, LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 1 }, LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 6 }] }, membership_state: MembershipState { committed: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} }, effective: EffectiveMembership { log_id: Some(LogId { leader_id: LeaderId { term: 0, node_id: 0 }, index: 0 }), membership: Membership { configs: [{1}], nodes: {1: Node { node_id: 1, rpc_addr: "127.0.0.1:1228" }} }, voter_ids: {1} } }, snapshot_meta: SnapshotMeta { last_log_id: None, last_membership: StoredMembership { log_id: None, membership: Membership { configs: [], nodes: {} } }, snapshot_id: "" }, server_state: Learner, io_state: IOState { building_snapshot: false, io_progress: IOProgress { accepted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), submitted: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })), flushed: Some(Log(LogIOId { committed_vote: CommittedVote { vote: Vote { leader_id: LeaderId { term: 1, node_id: 1 }, committed: true } }, log_id: None })) }, applied: Some(LogId { leader_id: LeaderId { term: 1, node_id: 1 }, index: 6 }), snapshot: None, purged: None }, purge_upto: None }, is_leader: true, is_voter: true
2024-10-04 08:23:34 INFO Start trying to initialize node:1
2024-10-04 08:23:34 INFO become leader id=1
2024-10-04 08:23:34 INFO remove all replication
2024-10-04 08:23:34 INFO id=1 HeartbeatWorker are shutdown
2024-10-04 08:23:34 INFO Whether nodes should be initialized, flag=true
2024-10-04 08:24:11 INFO When ctrl + c is received, the service starts to stop
2024-10-04 08:24:11 INFO HTTP Server stopped successfully
2024-10-04 08:24:11 INFO HTTP Server stopped successfully
2024-10-04 08:24:11 INFO Timer shutdown signal sent: Err(())
